## Reconhecimento de Padrões

Se você observa seguinte sequência: $2, 4, 6, 8, 10, 12, 14, 16, 18$ e $20$, pode reconhecer o padrão que todos os números são pares e aumentam de 2 em 2 - portanto poderia prever que o próximo número seria $22$. De modo similar, ao separar o problema em partes, é comum perceber que há similaridades entre elas. Reconhecer estes padrões permite que se crie abordagens mais genéricas que se adequem à uma classe de problemas, e não a somente uma ocorrência dele.

Por exemplo, considere as seguintes retas em um plano cartesiano que descrevem fenômenos físicos observados.

![Equações lineares](img/eq_linear.svg "Equações lineares"){ width="60%" }

Embora claramente diferentes, elas também têm similaridades. O comportamento de cada uma pode ser descrito de forma genérica pela equação $y = a\cdot{x} + b$. As implicações (e aplicações) disso são muito interessantes, esta abordagem simples pode ser utilizada para qualquer instância do problema!

Considere o problema de definir um procedimento para desenhar um um triângulo equilátero. Sabe-se que ele tem os 3 ângulos internos iguais a 60° e as 3 linhas com o mesmo comprimento. Se o ângulo interno é de 60°, [o ângulo externo é de 120°](https://pt.wikipedia.org/wiki/%C3%82ngulos_internos_e_externos#Propriedades), e torna-se relativamente simples definir um algoritmo que desenhe uma destas formas. De modo similar, um quadrado tem os 4 ângulos internos iguais a 90° e as 4 linhas com o mesmo comprimento; sendo simples adaptar o algoritmo anterior para desenhar um quadrado. Desenvolvendo esta abordagem para um pentágono regular, é possível perceber que as soluções são muito similares... A solução proposta constrói o desenho de modo que cada linha continua a partir do fim da linha anterior, usando o ângulo externo do polígono para a rotação.

| ![Ângulos interno/externo](img/AnguloExterno.png "Ângulos interno/externo"){ width="50%" } |
|:------:|
| Propriedade dos ângulos interno/externo. |

=== "Triângulo"

    ``` linguagem-natural
    Desenhe uma linha de comprimento L.
    Gire a caneta em 120° no sentido anti-horário.
    Desenhe uma linha de comprimento L.
    Gire a caneta em 120° no sentido anti-horário.
    Desenhe uma linha de comprimento L.
    ```

=== "Quadrado"

    ``` linguagem-natural
    Desenhe uma linha de comprimento L.
    Gire a caneta em 90° no sentido anti-horário.
    Desenhe uma linha de comprimento L.
    Gire a caneta em 90° no sentido anti-horário.
    Desenhe uma linha de comprimento L.
    Gire a caneta em 90° no sentido anti-horário.
    Desenhe uma linha de comprimento L.
    ```

=== "Pentágono"

    ``` linguagem-natural
    Desenhe uma linha de comprimento L.
    Gire a caneta em 118° no sentido anti-horário.
    Desenhe uma linha de comprimento L.
    Gire a caneta em 118° no sentido anti-horário.
    Desenhe uma linha de comprimento L.
    Gire a caneta em 118° no sentido anti-horário.
    Desenhe uma linha de comprimento L.
    Gire a caneta em 118° no sentido anti-horário.
    Desenhe uma linha de comprimento L.
    ```

Nos algoritmos, os ângulos e a quantidade de linhas são diferentes, mas também é possível reconhecer dois padrões nos processos:

1. Para um polígono regular de $n$ lados, tem-se $n$ linhas desenhadas.
2. Cada linha forma um ângulo externo de $^{360°}/_n$ com outra linha.

Desta forma, é possível ajustar os procedimentos de desenho e angulação das linhas para formar triângulos, quadrados e pentágonos apenas em função da quantidade de lados destas formas. Melhor ainda, pode-se determinar uma solução genérica que atende qualquer polígono regular.

=== "Triângulo"

    ``` linguagem-natural title="Triângulo Equilátero"
    ângulo_externo = 360 / 3

    # 3 repetições
    Desenhe uma linha de comprimento L.
    Gire a caneta em ângulo_externo graus no sentido anti-horário.

    Desenhe uma linha de comprimento L.
    Gire a caneta em ângulo_externo graus no sentido anti-horário.

    Desenhe uma linha de comprimento L.
    Gire a caneta em ângulo_externo graus no sentido anti-horário.
    ```

=== "Quadrado"

    ``` linguagem-natural title="Retângulo Regular"
    ângulo_externo = 360 / 4

    # 4 repetições
    Desenhe uma linha de comprimento L.
    Gire a caneta em ângulo_externo graus no sentido anti-horário.

    Desenhe uma linha de comprimento L.
    Gire a caneta em ângulo_externo graus no sentido anti-horário.

    Desenhe uma linha de comprimento L.
    Gire a caneta em ângulo_externo graus no sentido anti-horário.

    Desenhe uma linha de comprimento L.
    Gire a caneta em ângulo_externo graus no sentido anti-horário.
    ```

=== "Pentágono"

    ``` linguagem-natural title="Pentágono Regular"
    ângulo_externo = 360 / 5

    # 5 repetições
    Desenhe uma linha de comprimento L.
    Gire a caneta em ângulo_externo graus no sentido anti-horário.

    Desenhe uma linha de comprimento L.
    Gire a caneta em ângulo_externo graus no sentido anti-horário.

    Desenhe uma linha de comprimento L.
    Gire a caneta em ângulo_externo graus no sentido anti-horário.

    Desenhe uma linha de comprimento L.
    Gire a caneta em ângulo_externo graus no sentido anti-horário.

    Desenhe uma linha de comprimento L.
    Gire a caneta em ângulo_externo graus no sentido anti-horário.
    ```

=== "Polígono"

    ``` linguagem-natural title="Polígono Regular"
    ângulo_externo = 360 / número_de_lados

    Repita número_de_lados vezes:
        Desenhe uma linha de comprimento L.
        Gire a caneta em ângulo_externo graus no sentido anti-horário.
    ```

=== "Python + Turtle"

    ``` python title="Polígono Regular"
    --8<-- "turtle/poligono_regular.py:7:11"
    ```
