## Projeto de Algoritmos

O passo final do pensamento computacional é criar uma sequência de instruções que resolve o problema. O ponto chave é guiar o raciocínio para construir a solução. Para tanto, é preciso considerar uma série de coisas. Qual o objetivo principal? Como abstrair o contexto? Como decompô-lo em partes mais acessíveis? Em que ordem estas partes devem ser tratadas?

!!! definição "Pensamento Algorítmico"

    Processo de construir uma sequência de passos ordenados que pode ser seguida para obter uma solução para todos os problemas constituintes necessários para resolver o problema original[@Cansu2019].

A aplicação do pensamento algorítmico depende de um bom entendimento do problema. É preciso saber claramente quais as informações fornecidas e o que se espera como resultado. Considere se há alguma parte que precisa ser repetida ou se há comportamentos diferentes dependendo de certas condições. São ponderações necessárias para desenvolver uma solução.

!!! dica

    Duas ideias que ajudam este processo são: 1) se perguntar "E se eu fizesse desse jeito?" (explorando formas diferentes de resolver o problema); e 2) explicar a sua solução a alguém (ou a um [pato de borracha](https://pt.wikipedia.org/wiki/Debug_com_Pato_de_Borracha)), ao tentar ensinar uma solução [você estará efetivamente aprendendo sobre ela](https://degraucultural.com.br/noticia/ensinar-e-uma-das-melhores-formas-de-aprender-entenda).

Com um entendimento adequado do problema e seu contexto, pode-se projetar o algoritmo. O grande [Richard Feynman](https://pt.wikipedia.org/wiki/Richard_Feynman) tem um abordagem muito interessante para a resolução de problemas:

![Abordagem Feynman de Resolução de Problemas](images/feynman.svg){ width="50%" }

Alguns problemas [não têm solução](https://pt.wikipedia.org/wiki/Lista_de_problemas_em_aberto), neles geralmente se aplica a abordagem "consigo mostrar que ele não pode ser resolvido?". Se sim, efetivamente ele está resolvido: não há solução possível. Mesmo assim, a parte mais importante do processo é o raciocínio aplicado no projeto do algoritmo.

<h3>Automação</h3>

Considerando que muitas das atividades cotidianas são repetitivas e poderiam ser realizadas por um computador dadas as instruções corretas[@Sweigart2020], o uso de mecanismos para automação de um algoritmo possibilita uma série de vantagens. Pode aumentar a eficiência na produção dos resultados e a uniformidade destes, reduzir a incidência de erros e liberar recursos humanos para lidar com outras atividades.

Parte importante deste processo é o entendimento do que pode ou não ser computado. O computador existe como entidade física e opera dentro de certos limites. Portanto, apesar de podermos planejar soluções lógica e matematicamente corretas, é possível que estas não possam ser executadas na máquina. Por exemplo, é preciso compor um algoritmo baseado em instruções existentes no computador, algo como *realize estas operações matemáticas sobre números* é viável enquanto *faça uma pizza* não é. Mas pode ser mais complicado do que isso.

Considere o problema de computar o valor de $\pi$. Há [métodos para calcular o valor exato](https://pt.wikipedia.org/wiki/Pi#M%C3%A9todos_de_s%C3%A9ries_infinitas), mas ainda assim o resultado é um valor irracional , ou seja, um número infinamente longo que a máquina não consegue processar. Ainda que conseguisse, seria necessário armazenar todos estes dígitos, o que impossível em um dispositivo com memória limitada. Além disso, este processo envolve uma quantidade infinitamente grande de operações, algo que a máquina não poderá realizar (nem o usuário esperar o resultado).

$$\pi = 4\cdot\sum\limits_{n=0}^{\infty}\frac{(-1)^n}{2n+1}$$

O processo de formulação de uma solução algorítmica para ser automatizada necessariamente deve considerar essas limitações de modo a chegar a uma opção que seja realizável.
